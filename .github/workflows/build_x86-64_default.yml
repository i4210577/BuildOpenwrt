##************************************************************************
 # File Name: build_x86-64_default.yml
 # Author: ecras_y@163.com
 # Created Time: 2022-07-16 15:39:29 UTC
 # Modified Time: 2022-07-30 06:09:29 UTC
 # Description: Thanks to bigbugcc @ https://github.com/bigbugcc/OpenWrts
 # Description: Thanks to P3TERX @ https://github.com/P3TERX/Actions-OpenWrt
 # Description: Thanks to SuLingGG @ https://github.com/SuLingGG/OpenWrt-Rpi
 # ┏┛ ┻━━━━━┛ ┻┓
 # ┃           ┃
 # ┃      ━     ┃
 # ┃  ┳┛    ┗┳   ┃
 # ┃           ┃
 # ┃      ┻     ┃
 # ┃           ┃
 # ┗━┓      ┏━━━┛
 #   ┃      ┃   神兽保佑
 #   ┃      ┃   代码无虫
 #   ┃      ┗━━━━━━━━━┓
 #   ┃                ┣┓
 #   ┃               ┏┛
 #   ┗━┓ ┓ ┏━━━┳ ┓ ┏━┛
 #     ┃ ┫ ┫   ┃ ┫ ┫
 #    ┗━┻━┛   ┗━┻━┛
#***********************************************************************/


name: Build x86-64

on:
  repository_dispatch:
  workflow_dispatch:
  #schedule:
  #  - cron: 0 18 * * *
  # watch:
  #   types: started

env:
  SOURCE_URL: https://github.com/coolsnowwolf/lede
  SOURCE_BRANCH: master
  CONFIG_FILE: configs/x86_64.config
  DIY_SH: diy.sh
  FIX_SH: fix.sh
  FEEDS_SH: feeds.sh
  TOOLCHAIN_TAG: toolchain
  TOOLCHAIN_RELEASE_UPLOAD: true
  FIRMWARE_RELEASE_UPLOAD: true
  FREE_UP_DISK: true
  COMBINE_DISK: true
  TZ: Asia/Shanghai

jobs:
  Toolchain:
    runs-on: ubuntu-20.04

    outputs:
      OPENWRT_ROOT_PATH: ${{ steps.clone.outputs.OPENWRT_ROOT_PATH }}
      CURRENT_BRANCH: ${{ steps.env.outputs.CURRENT_BRANCH }}
      SOURCE_OWNER: ${{ steps.env.outputs.SOURCE_OWNER }}
      SOURCE_REPO: ${{ steps.env.outputs.SOURCE_REPO }}
      DEVICE_PLATFORM: ${{ steps.env.outputs.DEVICE_PLATFORM }}
      DEVICE_TARGET: ${{ steps.env.outputs.DEVICE_TARGET }}
      DEVICE_SUBTARGET: ${{ steps.env.outputs.DEVICE_SUBTARGET }}
      TOOLCHAIN_IMAGE: ${{ steps.env.outputs.TOOLCHAIN_IMAGE }}

    steps:
      - name: 初始化环境
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc
          sudo -E apt-get -qq update
          sudo -E apt-get -qq install $(curl -fsSL https://raw.githubusercontent.com/ecrasy/BuildOpenwrt/main/openwrt-env)
          sudo -E apt-get -qq autoremove --purge
          sudo -E apt-get -qq clean
          sudo ln -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime
          docker image prune -a -f
          git config --global init.defaultBranch main
          mkdir -p workspace

      - name: 准备结束
        uses: actions/checkout@main

      - name: 克隆源代码
        id: clone
        run: |
          df -hT $PWD
          git clone $SOURCE_URL -b $SOURCE_BRANCH workspace/openwrt
          cd workspace/openwrt
          echo "OPENWRT_ROOT_PATH=$PWD" >> $GITHUB_ENV
          echo "::set-output name=OPENWRT_ROOT_PATH::$(echo $PWD)"

      - name: 生成工具链配置 .config
        run: |
          cp $CONFIG_FILE $OPENWRT_ROOT_PATH/.config
          echo -e "\nCONFIG_ALL=y" >> $OPENWRT_ROOT_PATH/.config
          echo -e "\nCONFIG_ALL_NONSHARED=y" >> $OPENWRT_ROOT_PATH/.config
          cd $OPENWRT_ROOT_PATH
          make defconfig > /dev/null 2>&1

      - name: 生成变量
        id: env
        run: |
          export CURRENT_BRANCH="$(git symbolic-ref --short HEAD)"
          echo "CURRENT_BRANCH=$CURRENT_BRANCH" >> $GITHUB_ENV
          echo "::set-output name=CURRENT_BRANCH::$(echo $CURRENT_BRANCH)"
          cd $OPENWRT_ROOT_PATH
          export SOURCE_OWNER="$(echo $SOURCE_URL | awk -F '/' '{print $(NF-1)}')"
          echo "SOURCE_OWNER=$SOURCE_OWNER" >> $GITHUB_ENV
          echo "::set-output name=SOURCE_OWNER::$(echo $SOURCE_OWNER)"
          export SOURCE_REPO="$(echo $SOURCE_URL | awk -F '/' '{print $(NF)}')"
          echo "SOURCE_REPO=$SOURCE_REPO" >> $GITHUB_ENV
          echo "::set-output name=SOURCE_REPO::$(echo $SOURCE_REPO)"
          export DEVICE_TARGET=$(cat .config | grep CONFIG_TARGET_BOARD | awk -F '"' '{print $2}')
          echo "DEVICE_TARGET=$DEVICE_TARGET" >> $GITHUB_ENV
          echo "::set-output name=DEVICE_TARGET::$(echo $DEVICE_TARGET)"
          export DEVICE_SUBTARGET=$(cat .config | grep CONFIG_TARGET_SUBTARGET | awk -F '"' '{print $2}')
          echo "DEVICE_SUBTARGET=$DEVICE_SUBTARGET" >> $GITHUB_ENV
          echo "::set-output name=DEVICE_SUBTARGET::$(echo $DEVICE_SUBTARGET)"
          export DEVICE_PLATFORM=$(cat .config | grep CONFIG_TARGET_ARCH_PACKAGES | awk -F '"' '{print $2}')
          echo "DEVICE_PLATFORM=$DEVICE_PLATFORM" >> $GITHUB_ENV
          echo "::set-output name=DEVICE_PLATFORM::$(echo $DEVICE_PLATFORM)"
          export TOOLCHAIN_IMAGE="toolchain-$SOURCE_OWNER-$SOURCE_REPO-$SOURCE_BRANCH-$DEVICE_TARGET-$DEVICE_SUBTARGET"
          echo "TOOLCHAIN_IMAGE=$TOOLCHAIN_IMAGE" >> $GITHUB_ENV
          echo "::set-output name=TOOLCHAIN_IMAGE::$(echo $TOOLCHAIN_IMAGE)"

      - name: 比较工具链哈希
        id: hash
        run: |
          cd $OPENWRT_ROOT_PATH
          export CURRENT_HASH=$(git log --pretty=tformat:"%H" -n1 tools toolchain)
          echo "CURRENT_HASH=$CURRENT_HASH" >> $GITHUB_ENV
          echo "::set-output name=CURRENT_HASH::$(echo $CURRENT_HASH)"
          echo "CURRENT_HASH is $CURRENT_HASH"
          export CACHE_HASH=$(curl -fSsL https://github.com/$GITHUB_REPOSITORY/releases/download/$TOOLCHAIN_TAG/$TOOLCHAIN_IMAGE.hash)
          echo "CACHE_HASH is $CACHE_HASH"
          if [ -z "$CACHE_HASH" ] || [ "$CURRENT_HASH" != "$CACHE_HASH" ]; then
            echo "::set-output name=REBUILD_TOOLCHAIN::true"
          fi


      - name: 编译工具
        if: steps.hash.outputs.REBUILD_TOOLCHAIN == 'true'
        run: |
          cd $OPENWRT_ROOT_PATH
          echo -e "$(nproc) thread compile"
          make tools/compile -j$(nproc) || make tools/compile -j1 V=s

      - name: 编译工具链
        if: steps.hash.outputs.REBUILD_TOOLCHAIN == 'true'
        run: |
          cd $OPENWRT_ROOT_PATH
          echo -e "$(nproc) thread compile"
          make toolchain/compile -j$(nproc) || make toolchain/compile -j1 V=s
          rm -rf .config* dl bin

      - name: 生成工具链映像
        if: steps.hash.outputs.REBUILD_TOOLCHAIN == 'true'
        run: |
          cd workspace
          mksquashfs openwrt $TOOLCHAIN_IMAGE -force-gid 1001 -force-uid 1001 -comp zstd
          mkdir -p $GITHUB_WORKSPACE/output
          split -d -b 1900M $TOOLCHAIN_IMAGE $GITHUB_WORKSPACE/output/$TOOLCHAIN_IMAGE.img.
          rm $TOOLCHAIN_IMAGE
          cd $OPENWRT_ROOT_PATH
          echo $CURRENT_HASH > $GITHUB_WORKSPACE/output/toolchain-$SOURCE_OWNER-$SOURCE_REPO-$SOURCE_BRANCH-$DEVICE_TARGET-$DEVICE_SUBTARGET.hash
          ls -lh $GITHUB_WORKSPACE/output

      - name: 将工具链映像上传到工件
        if: env.TOOLCHAIN_RELEASE_UPLOAD != 'true' && steps.hash.outputs.REBUILD_TOOLCHAIN == 'true'
        uses: actions/upload-artifact@main
        with:
          name: ${{ env.TOOLCHAIN_IMAGE }}
          path: output

      - name: 从发布中删除旧的工具链资产
        if: env.TOOLCHAIN_RELEASE_UPLOAD == 'true' && steps.hash.outputs.REBUILD_TOOLCHAIN == 'true'
        uses: mknejp/delete-release-assets@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          tag: ${{ env.TOOLCHAIN_TAG }}
          assets: "toolchain-${{ env.TOOLCHAIN_IMAGE }}.*"
          fail-if-no-assets: false
          fail-if-no-release: false

      - name: 上传工具链映像发布
        if: env.TOOLCHAIN_RELEASE_UPLOAD == 'true' && steps.hash.outputs.REBUILD_TOOLCHAIN == 'true'
        uses: ncipollo/release-action@v1.8.0
        with:
          name: toolchain-image
          allowUpdates: true
          replacesArtifacts: true
          tag: ${{ env.TOOLCHAIN_TAG }}
          commit: ${{ env.CURRENT_BRANCH }}
          token: ${{ secrets.GITHUB_TOKEN }}
          artifacts: output/*

  Build:
    needs: [Toolchain]
    runs-on: ubuntu-20.04

    steps:
      - name: 还原变量
        run: |
          echo "CURRENT_BRANCH=$(echo '${{needs.Toolchain.outputs.CURRENT_BRANCH}}')" >> $GITHUB_ENV
          echo "OPENWRT_ROOT_PATH=$(echo '${{needs.Toolchain.outputs.OPENWRT_ROOT_PATH}}')" >> $GITHUB_ENV
          echo "SOURCE_OWNER=$(echo '${{needs.Toolchain.outputs.SOURCE_OWNER}}')" >> $GITHUB_ENV
          echo "SOURCE_REPO=$(echo '${{needs.Toolchain.outputs.SOURCE_REPO}}')" >> $GITHUB_ENV
          echo "DEVICE_PLATFORM=$(echo '${{needs.Toolchain.outputs.DEVICE_PLATFORM}}')" >> $GITHUB_ENV
          echo "DEVICE_TARGET=$(echo '${{needs.Toolchain.outputs.DEVICE_TARGET}}')" >> $GITHUB_ENV
          echo "DEVICE_SUBTARGET=$(echo '${{needs.Toolchain.outputs.DEVICE_SUBTARGET}}')" >> $GITHUB_ENV
          echo "TOOLCHAIN_IMAGE=$(echo '${{needs.Toolchain.outputs.TOOLCHAIN_IMAGE}}')" >> $GITHUB_ENV

      - name: 初始化环境
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc
          sudo -E apt-get -qq update
          sudo -E apt-get -qq install $(curl -fsSL https://raw.githubusercontent.com/ecrasy/BuildOpenwrt/main/openwrt-env)
          sudo -E apt-get -qq autoremove --purge
          sudo -E apt-get -qq clean
          sudo ln -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime
          docker image prune -a -f
          git config --global init.defaultBranch main

      - name: 合并磁盘
        if: env.COMBINE_DISK == 'true'
        run: |
          sudo swapoff -a
          sudo rm -f /mnt/swapfile
          export ROOT_FREE_KB=$(df --block-size=1024 --output=avail / | tail -1)
          export ROOT_LOOP_KB=$(expr $ROOT_FREE_KB - 1048576)
          export ROOT_LOOP_BYTES=$(expr $ROOT_LOOP_KB \* 1024)
          sudo fallocate -l $ROOT_LOOP_BYTES /root.img
          export ROOT_LOOP_DEVNAME=$(sudo losetup -Pf --show /root.img)
          sudo pvcreate -f $ROOT_LOOP_DEVNAME
          export MNT_FREE_KB=$(df --block-size=1024 --output=avail /mnt | tail -1)
          export MNT_LOOP_KB=$(expr $MNT_FREE_KB - 102400)
          export MNT_LOOP_BYTES=$(expr $MNT_LOOP_KB \* 1024)
          sudo fallocate -l $MNT_LOOP_BYTES /mnt/mnt.img
          export MNT_LOOP_DEVNAME=$(sudo losetup -Pf --show /mnt/mnt.img)
          sudo pvcreate -f $MNT_LOOP_DEVNAME
          sudo vgcreate vgstorage $ROOT_LOOP_DEVNAME $MNT_LOOP_DEVNAME
          sudo lvcreate -n lvstorage -l 100%FREE vgstorage
          export LV_DEVNAME=$(sudo lvscan | awk -F "'" '{print $2}')
          sudo mkfs.btrfs -L combinedisk $LV_DEVNAME
          sudo mount -o compress=zstd $LV_DEVNAME $GITHUB_WORKSPACE
          sudo chown -R runner:runner $GITHUB_WORKSPACE
          mkdir $GITHUB_WORKSPACE/tmp
          chmod 777 $GITHUB_WORKSPACE/tmp
          sudo cp -rp /tmp/* $GITHUB_WORKSPACE/tmp
          sudo mount -B $GITHUB_WORKSPACE/tmp /tmp
          df -hT $GITHUB_WORKSPACE
          sudo btrfs filesystem usage $GITHUB_WORKSPACE

      - name: 准备结束
        run: |
          cd $GITHUB_WORKSPACE
          git init
          git remote add origin https://github.com/$GITHUB_REPOSITORY
          git fetch
          git checkout -t origin/$CURRENT_BRANCH

      - name: 下载工具链映像表单工件
        if: env.TOOLCHAIN_RELEASE_UPLOAD != 'true'
        uses: actions/download-artifact@v2
        with:
          name: ${{ env.TOOLCHAIN_IMAGE }}
          path: workspace

      - name: 准备工具链映像表单工件
        if: env.TOOLCHAIN_RELEASE_UPLOAD != 'true'
        run: |
          cd workspace
          for i in {1..9}
          do
            cat $TOOLCHAIN_IMAGE.img.0$i >> $TOOLCHAIN_IMAGE.img.00 && rm $TOOLCHAIN_IMAGE.img.0$i || break
          done
          mv $TOOLCHAIN_IMAGE.img.00 $TOOLCHAIN_IMAGE.img
          mkdir openwrt-ro openwrt workdir overlay
          sudo mount -o loop $TOOLCHAIN_IMAGE.img openwrt-ro
          sudo mount -t overlay overlay -o lowerdir=openwrt-ro,upperdir=overlay,workdir=workdir openwrt
          cd $OPENWRT_ROOT_PATH
          git pull

      - name: 准备工具链映像表单发布
        if: env.TOOLCHAIN_RELEASE_UPLOAD == 'true'
        run: |
          mkdir -p workspace
          cd workspace
          for i in {0..9}
          do
            curl -fsL https://github.com/$GITHUB_REPOSITORY/releases/download/$TOOLCHAIN_TAG/$TOOLCHAIN_IMAGE.img.0$i >> $TOOLCHAIN_IMAGE.img || break
          done
          mkdir openwrt-ro openwrt workdir overlay
          sudo mount -o loop $TOOLCHAIN_IMAGE.img openwrt-ro
          sudo mount -t overlay overlay -o lowerdir=openwrt-ro,upperdir=overlay,workdir=workdir openwrt
          cd $OPENWRT_ROOT_PATH
          git pull

      - name: 加载自定义源
        run: |
          cp $FEEDS_SH $OPENWRT_ROOT_PATH/$FEEDS_SH
          chmod +x $OPENWRT_ROOT_PATH/$FEEDS_SH
          cd $OPENWRT_ROOT_PATH
          ./$FEEDS_SH
          
      - name: 安装源
        run: |
          cd $OPENWRT_ROOT_PATH
          ./scripts/feeds clean
          ./scripts/feeds update -a
          ./scripts/feeds install -a -f

      - name: 加载自定义配置
        run: |
          cp $DIY_SH $OPENWRT_ROOT_PATH/$DIY_SH
          cp $FIX_SH $OPENWRT_ROOT_PATH/$FIX_SH
          cp $CONFIG_FILE $OPENWRT_ROOT_PATH/.config
          chmod +x $OPENWRT_ROOT_PATH/$DIY_SH
          chmod +x $OPENWRT_ROOT_PATH/$FIX_SH
          cd $OPENWRT_ROOT_PATH
          ./$FIX_SH
          ./$DIY_SH
          make defconfig

      - name: 释放 UP 磁盘空间
        if: env.FREE_UP_DISK == 'true'
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          sudo rm -rf /usr/share/dotnet
          sudo -E apt-get -q purge azure-cli ghc* zulu* hhvm llvm* firefox google* dotnet* powershell openjdk* mysql* php*
          sudo -E apt-get -qq autoremove --purge
          sudo -E apt-get -qq clean
          docker image prune -a -f
          df -h

      - name: 下载 DL 包
        id: download
        run: |
          cd $OPENWRT_ROOT_PATH
          make download -j$(nproc) || make download -j1 V=s
          df -h

      - name: 编译包
        run: |
          cd $OPENWRT_ROOT_PATH
          echo -e "$(nproc) thread compile"
          make buildinfo
          make diffconfig buildversion feedsversion
          make target/compile -j$(nproc) IGNORE_ERRORS="m n" BUILD_LOG=1 || \
          yes n | make target/compile -j1 V=s IGNORE_ERRORS=1
          make package/compile -j$(nproc) IGNORE_ERRORS=1 || make package/compile -j1 V=s IGNORE_ERRORS=1
          make package/index

      - name: 生成固件
        id: generate
        run: |
          cd $OPENWRT_ROOT_PATH
          make package/install -j$(nproc) || make package/install -j1 V=s
          make target/install -j$(nproc) || make target/install -j1 V=s
          make json_overview_image_info
          make checksum

      - name: 打印 Sha256sums
        run: |
          cd $OPENWRT_ROOT_PATH/bin/targets/$DEVICE_TARGET/$DEVICE_SUBTARGET
          cat sha256sums

      - name: 压缩 Bin 文件夹
        run: |
          cd $OPENWRT_ROOT_PATH
          zip -r $DEVICE_TARGET-$DEVICE_SUBTARGET.zip bin

      - name: 打印磁盘使用情况
        if: always()
        run: |
          echo 'lsblk -f'
          lsblk -f
          echo '-----'
          echo 'df -h'
          df -h
          echo '-----'
          echo 'btrfs filesystem usage'
          sudo btrfs filesystem usage $GITHUB_WORKSPACE
          echo '-----'

      - name: 上传 Bin 档案
        uses: actions/upload-artifact@main
        with:
          name: bin-archive
          path: ${{ env.OPENWRT_ROOT_PATH }}/${{ env.DEVICE_TARGET }}-${{ env.DEVICE_SUBTARGET }}.zip

  Upload:
    needs: [Build, Toolchain]
    runs-on: ubuntu-20.04

    steps:
      - name: 准备结束
        uses: actions/checkout@main

      - name: 还原变量
        run: |
          echo "CURRENT_BRANCH=$(echo '${{needs.Toolchain.outputs.CURRENT_BRANCH}}')" >> $GITHUB_ENV
          echo "OPENWRT_ROOT_PATH=$(echo '${{needs.Toolchain.outputs.OPENWRT_ROOT_PATH}}')" >> $GITHUB_ENV
          echo "SOURCE_OWNER=$(echo '${{needs.Toolchain.outputs.SOURCE_OWNER}}')" >> $GITHUB_ENV
          echo "SOURCE_REPO=$(echo '${{needs.Toolchain.outputs.SOURCE_REPO}}')" >> $GITHUB_ENV
          echo "DEVICE_PLATFORM=$(echo '${{needs.Toolchain.outputs.DEVICE_PLATFORM}}')" >> $GITHUB_ENV
          echo "DEVICE_TARGET=$(echo '${{needs.Toolchain.outputs.DEVICE_TARGET}}')" >> $GITHUB_ENV
          echo "DEVICE_SUBTARGET=$(echo '${{needs.Toolchain.outputs.DEVICE_SUBTARGET}}')" >> $GITHUB_ENV
          echo "TOOLCHAIN_IMAGE=$(echo '${{needs.Toolchain.outputs.TOOLCHAIN_IMAGE}}')" >> $GITHUB_ENV

      - name: 初始化环境
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          sudo -E apt-get -qq update
          sudo -E apt-get -qq install zip unzip rsync
          sudo ln -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime
          git config --global init.defaultBranch main

      - name: 下载 Bin 档案
        uses: actions/download-artifact@v2
        with:
          name: bin-archive
          path: ${{ env.OPENWRT_ROOT_PATH }}

      - name: 解压缩 Bin 档案
        run: |
          cd $OPENWRT_ROOT_PATH
          unzip $DEVICE_TARGET-$DEVICE_SUBTARGET.zip

      - name: 整理文件
        run: |
          export BUILD_DATE=$(date +"%Y-%m-%d")
          echo "BUILD_DATE=$BUILD_DATE" >> $GITHUB_ENV
          cd $OPENWRT_ROOT_PATH/bin/targets/$DEVICE_TARGET/$DEVICE_SUBTARGET
          rm -rf packages
          df -hT $PWD


      - name: 删除旧固件资产
        if: steps.hash.outputs.REBUILD_TOOLCHAIN == 'true'
        uses: mknejp/delete-release-assets@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          tag: ${{ env.DEVICE_TARGET }}-${{ env.DEVICE_SUBTARGET }}
          fail-if-no-assets: false
          fail-if-no-release: false
          assets: "*"

      - name: 部署要发布的文件
        uses: ncipollo/release-action@v1.8.0
        if: env.FIRMWARE_RELEASE_UPLOAD == 'true'
        with:
          name: openwrt-${{ env.DEVICE_TARGET }}-${{ env.DEVICE_SUBTARGET }}
          allowUpdates: true
          replacesArtifacts: true
          tag: ${{ env.DEVICE_TARGET }}-${{ env.DEVICE_SUBTARGET }}
          body: ${{ env.BUILD_DATE }}
          commit: ${{ env.CURRENT_BRANCH }}
          token: ${{ secrets.GITHUB_TOKEN }}
          artifacts: ${{ env.OPENWRT_ROOT_PATH }}/bin/targets/${{ env.DEVICE_TARGET }}/${{ env.DEVICE_SUBTARGET }}/*
